generator client {
  provider = "prisma-client-js"
}

generator zod {
  provider = "zod-prisma-types"
  output   = "../zod"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  create_at    DateTime @default(now())
  update_at    DateTime @default(now()) @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  create_at        DateTime          @default(now())
  update_at        DateTime          @default(now()) @updatedAt
  id               String            @id @unique @default(cuid())
  name             String?
  email            String?           @unique
  emailVerified    DateTime?
  image            String?
  type             PlayerType        @default(NONE)
  balance          Int               @default(0)
  factionId        String?
  accounts         Account[]
  freshmenDetails  FreshmenDetails?
  sessions         Session[]
  sophomoreDetails SophomoreDetails?
  faction          Factions?         @relation(fields: [factionId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model QRInstances {
  id        String            @id @unique @default(cuid())
  create_at DateTime          @default(now())
  update_at DateTime          @default(now()) @updatedAt
  ownerId   String
  quota     Int               @default(1)
  secret    String            @unique
  owner     SophomoreDetails  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  scannedBy FreshmenDetails[]
}

model PasscodeInstances {
  id        String           @id @unique @default(uuid())
  create_at DateTime         @default(now())
  update_at DateTime         @default(now()) @updatedAt
  usedById  String?
  ownerId   String
  owner     SophomoreDetails @relation(fields: [ownerId], references: [id])
  usedBy    FreshmenDetails? @relation(fields: [usedById], references: [id])

  content String
}

model Factions {
  id      String @id @unique @default(cuid())
  name    String
  handler String
  users   User[]
}

model RevealedHintInstances {
  hint             Hints  @relation(fields: [hintsHintSlugId, hintsSophomoreId], references: [hintSlugId, sophomoreId])
  hintsHintSlugId  String
  hintsSophomoreId String
  pair             Pair   @relation(fields: [pairId], references: [id])
  pairId           String

  @@id([hintsHintSlugId, hintsSophomoreId, pairId])
}

model Pair {
  id        String           @id @unique @default(cuid())
  freshmen  FreshmenDetails  @relation(fields: [freshmenDetailsId], references: [id])
  sophomore SophomoreDetails @relation(fields: [sophomoreDetailsId], references: [id])

  revealedHints RevealedHintInstances[]

  freshmenDetailsId  String @unique
  sophomoreDetailsId String @unique
}

model FreshmenDetails {
  create_at       DateTime            @default(now())
  update_at       DateTime            @updatedAt
  id              String              @id @unique @default(cuid())
  userId          String              @unique
  thisOrThat      ThisOrThat[]
  thisOrThatReady Boolean             @default(false)
  student_id      String              @unique
  title           NameTitle
  first_name      String
  last_name       String
  nickname        String
  branch          Branch
  facebook_link   String?
  instagram_link  String?
  phone           String
  user            User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  usedPasscodes   PasscodeInstances[]
  scannedQrs      QRInstances[]
  pair            Pair?
}

model HintSlugs {
  slug        String  @id @unique
  displayName String
  Hints       Hints[]
}

model Hints {
  hintSlugId            String
  content               String
  sophomoreId           String
  slug                  HintSlugs               @relation(fields: [hintSlugId], references: [slug])
  sophomore             SophomoreDetails        @relation(fields: [sophomoreId], references: [id], onDelete: Cascade)
  revealedHintInstances RevealedHintInstances[]

  craete_at DateTime @default(now())
  update_at DateTime @default(now()) @updatedAt

  @@id([hintSlugId, sophomoreId])
}

model SophomoreDetails {
  create_at         DateTime            @default(now())
  update_at         DateTime            @updatedAt
  thisOrThat        ThisOrThat[]
  thisOrThatReady   Boolean             @default(false)
  hintsReady        Boolean             @default(false)
  userId            String              @unique
  id                String              @id @unique @default(cuid())
  fullname          String
  title             NameTitle
  student_id        String              @unique
  nickname          String
  branch            Branch
  participate       Boolean
  many_fresh        Boolean
  facebook_link     String
  instagram_link    String
  phone             String
  hints             Hints[]
  PasscodeInstances PasscodeInstances[]
  QRInstances       QRInstances[]
  user              User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  pair              Pair[]
}

enum PlayerType {
  NONE
  GUEST
  FRESHMEN
  SOPHOMORE
  SENIOR
}

enum NameTitle {
  MR
  MRS
}

enum Branch {
  IT
  DSBA
  BIT
  AIT
}

enum ThisOrThat {
  LEFT
  RIGHT
}
